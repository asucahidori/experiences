<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gatz.discovery.modules.cidm.dao.TBldHouseMapper" >
  <resultMap id="BaseResultMap" type="com.gatz.discovery.modules.cidm.model.TBldHouse" >
    <id column="house_id" property="houseId" jdbcType="BIGINT" />
    <result column="building_id" property="buildingId" jdbcType="BIGINT" />
    <result column="floor" property="floor" jdbcType="SMALLINT" />
    <result column="building_unit_no" property="buildingUnitNo" jdbcType="VARCHAR" />
    <result column="building_house_no" property="buildingHouseNo" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="coordinate_x" property="coordinateX" jdbcType="REAL" />
    <result column="coordinate_y" property="coordinateY" jdbcType="REAL" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
   <!-- 街道等地图的显示记录 -->
  <resultMap id="AreaMapVoMap" type="com.gatz.discovery.modules.cidm.model.AreaMapVo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="longitude_X" property="longitudeX" jdbcType="REAL" />
    <result column="longitude_Y" property="longitudeY" jdbcType="REAL" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="area_Name" property="areaName" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    house_id, building_id, floor, building_unit_no, building_house_no, address, coordinate_x, 
    coordinate_y, status, version, create_user, create_time, update_user, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouseExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_bld_house
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_bld_house
    where house_id = #{houseId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_bld_house
    where house_id = #{houseId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouseExample" >
    delete from t_bld_house
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouse" >
    insert into t_bld_house (house_id, building_id, floor, 
      building_unit_no, building_house_no, address, 
      coordinate_x, coordinate_y, status, 
      version, create_user, create_time, 
      update_user, update_time)
    values (#{houseId,jdbcType=BIGINT}, #{buildingId,jdbcType=BIGINT}, #{floor,jdbcType=SMALLINT}, 
      #{buildingUnitNo,jdbcType=VARCHAR}, #{buildingHouseNo,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{coordinateX,jdbcType=REAL}, #{coordinateY,jdbcType=REAL}, #{status,jdbcType=INTEGER}, 
      #{version,jdbcType=INTEGER}, #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouse" >
    insert into t_bld_house
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="houseId != null" >
        house_id,
      </if>
      <if test="buildingId != null" >
        building_id,
      </if>
      <if test="floor != null" >
        floor,
      </if>
      <if test="buildingUnitNo != null" >
        building_unit_no,
      </if>
      <if test="buildingHouseNo != null" >
        building_house_no,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="coordinateX != null" >
        coordinate_x,
      </if>
      <if test="coordinateY != null" >
        coordinate_y,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="houseId != null" >
        #{houseId,jdbcType=BIGINT},
      </if>
      <if test="buildingId != null" >
        #{buildingId,jdbcType=BIGINT},
      </if>
      <if test="floor != null" >
        #{floor,jdbcType=SMALLINT},
      </if>
      <if test="buildingUnitNo != null" >
        #{buildingUnitNo,jdbcType=VARCHAR},
      </if>
      <if test="buildingHouseNo != null" >
        #{buildingHouseNo,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="coordinateX != null" >
        #{coordinateX,jdbcType=REAL},
      </if>
      <if test="coordinateY != null" >
        #{coordinateY,jdbcType=REAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouseExample" resultType="java.lang.Integer" >
    select count(*) from t_bld_house
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_bld_house
    <set >
      <if test="record.houseId != null" >
        house_id = #{record.houseId,jdbcType=BIGINT},
      </if>
      <if test="record.buildingId != null" >
        building_id = #{record.buildingId,jdbcType=BIGINT},
      </if>
      <if test="record.floor != null" >
        floor = #{record.floor,jdbcType=SMALLINT},
      </if>
      <if test="record.buildingUnitNo != null" >
        building_unit_no = #{record.buildingUnitNo,jdbcType=VARCHAR},
      </if>
      <if test="record.buildingHouseNo != null" >
        building_house_no = #{record.buildingHouseNo,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.coordinateX != null" >
        coordinate_x = #{record.coordinateX,jdbcType=REAL},
      </if>
      <if test="record.coordinateY != null" >
        coordinate_y = #{record.coordinateY,jdbcType=REAL},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_bld_house
    set house_id = #{record.houseId,jdbcType=BIGINT},
      building_id = #{record.buildingId,jdbcType=BIGINT},
      floor = #{record.floor,jdbcType=SMALLINT},
      building_unit_no = #{record.buildingUnitNo,jdbcType=VARCHAR},
      building_house_no = #{record.buildingHouseNo,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      coordinate_x = #{record.coordinateX,jdbcType=REAL},
      coordinate_y = #{record.coordinateY,jdbcType=REAL},
      status = #{record.status,jdbcType=INTEGER},
      version = #{record.version,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouse" >
    update t_bld_house
    <set >
      <if test="buildingId != null" >
        building_id = #{buildingId,jdbcType=BIGINT},
      </if>
      <if test="floor != null" >
        floor = #{floor,jdbcType=SMALLINT},
      </if>
      <if test="buildingUnitNo != null" >
        building_unit_no = #{buildingUnitNo,jdbcType=VARCHAR},
      </if>
      <if test="buildingHouseNo != null" >
        building_house_no = #{buildingHouseNo,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="coordinateX != null" >
        coordinate_x = #{coordinateX,jdbcType=REAL},
      </if>
      <if test="coordinateY != null" >
        coordinate_y = #{coordinateY,jdbcType=REAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where house_id = #{houseId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gatz.discovery.modules.cidm.model.TBldHouse" >
    update t_bld_house
    set building_id = #{buildingId,jdbcType=BIGINT},
      floor = #{floor,jdbcType=SMALLINT},
      building_unit_no = #{buildingUnitNo,jdbcType=VARCHAR},
      building_house_no = #{buildingHouseNo,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      coordinate_x = #{coordinateX,jdbcType=REAL},
      coordinate_y = #{coordinateY,jdbcType=REAL},
      status = #{status,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where house_id = #{houseId,jdbcType=BIGINT}
  </update>
  
  <!-- 查询 列表-->
 <select id="queryTbldHouseInfo" parameterType="java.util.Map" resultMap="BaseResultMap">
     select
			 t.house_id , 
			 t.building_id , 
			 CASE INSTR(SUBSTRING(t.address,INSTR(t.address,'号')+1),'号')-INSTR(SUBSTRING(t.address,INSTR(t.address,'号')+1),'元')-1
 WHEN 3 THEN SUBSTRING(t.address,INSTR(t.address,'元')+1,1)
 WHEN 4 THEN SUBSTRING(t.address,INSTR(t.address,'元')+1,2)
 ELSE SUBSTRING(t.address,INSTR(t.address,'元')+1,1) END AS floor , 
			 SUBSTRING(t.address,INSTR(t.address,'楼')+1,INSTR(t.address,'单')-INSTR(t.address,'楼')-1) AS building_unit_no, 
			 SUBSTRING_INDEX(SUBSTRING(t.address,INSTR(t.address,'元')+1), '号', 1) AS building_house_no, 
			 t.address , 
			 t.coordinate_x longitude_x, 
			 t.coordinate_y longitude_y, 
			 t.status , 
			 t.version , 
			 t.create_user , 
			 t.create_time , 
			 t.update_user , 
			 t.update_time,
			 9 type
	   from  t_bld_house t
     <where> 
     		and t.status=0
		       <if test="houseId != null and houseId !=''">
				  and house_id = #{houseId}
				</if>
		       <if test="buildingId != null and buildingId !=''">
				  and building_id = #{buildingId}
				</if>
		       <if test="floor != null and floor !=''">
				  and floor = #{floor}
				</if>
		       <if test="buildingUnitNo != null and buildingUnitNo !=''">
				  and building_unit_no = #{buildingUnitNo}
				</if>
		       <if test="buildingHouseNo != null and buildingHouseNo !=''">
				  and building_house_no = #{buildingHouseNo}
				</if>
		       <if test="address != null and address !=''">
				  and address = #{address}
				</if>
		       <if test="coordinateX != null and coordinateX !=''">
				  and coordinate_x = #{coordinateX}
				</if>
		       <if test="coordinateY != null and coordinateY !=''">
				  and coordinate_y = #{coordinateY}
				</if>
		       <if test="version != null and version !=''">
				  and version = #{version}
				</if>
		       <if test="createUser != null and createUser !=''">
				  and create_user = #{createUser}
				</if>
		       <if test="createTime != null and createTime !=''">
				  and create_time = #{createTime}
				</if>
		       <if test="updateUser != null and updateUser !=''">
				  and update_user = #{updateUser}
				</if>
     </where>
     <if test="from != null  and  rows != null ">
		     limit #{ from},#{ rows}
        </if>
 </select>
</mapper>